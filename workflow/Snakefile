#############
# Libraries #
#############
from os.path import join as osjoin
import pandas as pd

# store the local path to the dropbox folder in the 'PROJ_HOME_DIR' file.
PROJ_HOME = open('PROJ_HOME_DIR').read().strip()
DATA_DIR = osjoin(PROJ_HOME, 'data')
RAW_DIR = osjoin(DATA_DIR, 'raw')
DERIVED_DIR = osjoin(DATA_DIR, 'derived')
FIG_DIR = osjoin(PROJ_HOME, 'figs')

###########################################################
# DATA FILES
###########################################################
AGG_CODED_SENTENCES = osjoin(DERIVED_DIR, 'coded_fulltext_sentences.csv')
PERCENT_AGREEMENT = osjoin(DERIVED_DIR, 'percent_agreement.csv')
QUERY_COUNTS = osjoin(RAW_DIR, '20200511_query_counts.csv')

FIELDMAP_DATA = osjoin(RAW_DIR, 'mapdata_fixed.txt')

###########################################################
# FIGURES
###########################################################

# Validity
PERCENT_AGREEMENT_PLOT = osjoin(FIG_DIR, 'validity', 'percent_{measure}.pdf')
OVERALL_VALIDITY_PLOT = osjoin(FIG_DIR, 'validity', 'overall_validity.pdf')
QUERY_COUNT_BAR_PLOT = osjoin(FIG_DIR, 'validity', 'query_bar_plot.pdf')

# Representation
QUERY_REPRESENTATION_PLOT = osjoin(FIG_DIR, 'representation', '{query}_query_representation.pdf')
CITANCE_BY_FIELD_PLOT = osjoin(FIG_DIR, 'representation', 'citances_by_field.pdf')

# VosViewer-style maps
FIELDMAP_CONVEX_HULL_PLOT = osjoin(FIG_DIR, 'fieldmap', 'hull', '{cluster}_convex_hull.pdf')
FIELDMAP_REFERENCE_PLOT = osjoin(FIG_DIR, 'fieldmap', 'reference_fieldmap.pdf')

###########################################################
# PARAMETERS
###########################################################
MEASURE_TYPES = ['agreement', 'validity']
QUERY_TYPES = ['all', 'signal_name', 'filter_name']
CLUSTERS = ["Soc-Hum", "Bio-Health", "Phys-Engr", "Life-Earth", "Math-Comp"]


###########################################################
# TARGET RULE
###########################################################
rule all:
    input:
        AGG_CODED_SENTENCES,
        expand(PERCENT_AGREEMENT_PLOT, measure = MEASURE_TYPES),
        OVERALL_VALIDITY_PLOT,
        QUERY_COUNT_BAR_PLOT,
        expand(QUERY_REPRESENTATION_PLOT, query = QUERY_TYPES),
        CITANCE_BY_FIELD_PLOT,
        FIELDMAP_REFERENCE_PLOT,
        expand(FIELDMAP_CONVEX_HULL_PLOT, cluster = CLUSTERS)

rule aggregate_coded_sentences:
    params: osjoin(DATA_DIR, 'coded'),
    output: AGG_CODED_SENTENCES,
    shell:
        "Rscript scripts/dataprocessing/aggregate_coded_sentences.R \
        --input {params} --output {output}"

rule calculate_percent_agreement:
    input: rules.aggregate_coded_sentences.output,
    output: PERCENT_AGREEMENT
    shell:
        "Rscript scripts/dataprocessing/calculate_percent_agreement.R \
        --input {input} --output {output}"

rule plot_percent_agreement:
    input: rules.calculate_percent_agreement.output
    output: PERCENT_AGREEMENT_PLOT
    shell:
        "Rscript scripts/figures/percent_agreement.R \
        --input {input} --output {output} --type {wildcards.measure}"

rule plot_overall_validity:
    input: rules.calculate_percent_agreement.output
    params: QUERY_COUNTS
    output: OVERALL_VALIDITY_PLOT
    shell:
        "Rscript scripts/figures/overall_validity.R \
        --input {input} --output {output} --counts {params}"

rule plot_query_count:
    params: QUERY_COUNTS
    output: QUERY_REPRESENTATION_PLOT
    shell:
        "Rscript scripts/figures/query_representation.R \
        --input {params} --output {output} --type {wildcards.query}"

rule plot_citance_count_by_field:
    params: QUERY_COUNTS
    output: CITANCE_BY_FIELD_PLOT
    shell:
        "Rscript scripts/figures/citance_count_by_field.R \
        --input {params} --output {output}"

rule plot_fieldmap_reference:
    params: FIELDMAP_DATA
    output: FIELDMAP_REFERENCE_PLOT
    shell:
        "Rscript scripts/figures/fieldmap_reference.R \
        --input {params} --output {output}"


rule plot_fieldmap_convex_hull:
    params: FIELDMAP_DATA
    output: FIELDMAP_CONVEX_HULL_PLOT
    shell:
        "Rscript scripts/figures/fieldmap_cluster_hull.R \
        --input {params} --output {output} --cluster \'{wildcards.cluster}\'"
